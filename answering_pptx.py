# -*- coding: utf-8 -*-
"""answering_pptx (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S2PzmsYQi1gZb4urLbK4wekGdgyQNhcP
"""

!pip install python-pptx

import tensorflow as tf
print("TensorFlow version:", tf.__version__)

if tf.config.list_physical_devices('GPU'):
    print("GPU is available")
else:
    print("No GPU is available")

from pptx import Presentation

pptx_file_paths = ['Root Cause Analysis 01142022.pptx', 'Business Process Improvement 12152021.pptx','Business Process Monitoring 12102021.pptx', 'Change Diagnostic 01282022.pptx','Soldoc Segregation of Permission.pptx', 'User Experience Monitoring 02182022.pptx' , 'Custom Code Management 12142021.pptx', 'Data Consistency Management 02102022.pptx', 'Integration Monitoring 02032022.pptx', 'Integration Monitoring 02032022.pptx']

main_text=[]
txt=""
for pptx_file_path in pptx_file_paths:
  presentation = Presentation(pptx_file_path)

  # Slides
  for slide in presentation.slides:
      # Slide contents
      for shape in slide.shapes:
          if shape.has_text_frame:
              # Extract text from text frames
              text_frame = shape.text_frame
              for paragraph in text_frame.paragraphs:
                    for run in paragraph.runs:
                        text = run.text
                        txt=txt+text
  main_text.append(txt)

print(main_text)

!pip install transformers

from transformers import pipeline

nlp = pipeline("question-answering")

best_answer = None
best_paragraph = None
best_score = 0
doc_name=None
quest="What is the most commun use case of the trace analysis tools?"

# Iterate over each paragraph and perform question answering
for i in range(len(main_text)):
    result = nlp(question=quest, context=main_text[i])
    answer = result['answer']
    score = result['score']

    # Keep track of the highest-scoring answer and its corresponding paragraph
    if score > best_score:
        best_answer = answer
        best_paragraph = main_text[i]
        best_score = score
        doc_name=pptx_file_paths[i]

# Print the best answer and the corresponding paragraph
print(f"Question: {quest}")
print(f"Answer: {best_answer}")
print(f"Document : {doc_name}")

best_answer = None
best_paragraph = None
best_score = 0
doc_name=""
quest="What are the weaknesses that SAP Business Process Operations compromises?"

# Iterate over each paragraph and perform question answering
for i in range(len(main_text)):
    result = nlp(question=quest, context=main_text[i])
    answer = result['answer']
    score = result['score']

    # Keep track of the highest-scoring answer and its corresponding paragraph
    if score > best_score:
        best_answer = answer
        best_paragraph = main_text[i]
        best_score = score
        doc_name=pptx_file_paths[i]

# Print the best answer and the corresponding paragraph
print(f"Question: {quest}")
print(f"Answer: {best_answer}")
print(f"Document : {doc_name}")

best_answer = None
best_paragraph = None
best_score = 0
doc_name=""
quest="What are the different sections of the ABAP SysLog Error view?"

# Iterate over each paragraph and perform question answering
for i in range(len(main_text)):
    result = nlp(question=quest, context=main_text[i])
    answer = result['answer']
    score = result['score']

    # Keep track of the highest-scoring answer and its corresponding paragraph
    if score > best_score:
        best_answer = answer
        best_paragraph = main_text[i]
        best_score = score
        doc_name=pptx_file_paths[i]

# Print the best answer and the corresponding paragraph
print(f"Question: {quest}")
print(f"Answer: {best_answer}")
print(f"Document : {doc_name}")

best_answer = None
best_paragraph = None
best_score = 0
doc_name=""
quest="How are the authorization areas defined?"

# Iterate over each paragraph and perform question answering
for i in range(len(main_text)):
    result = nlp(question=quest, context=main_text[i])
    answer = result['answer']
    score = result['score']

    # Keep track of the highest-scoring answer and its corresponding paragraph
    if score > best_score:
        best_answer = answer
        best_paragraph = main_text[i]
        best_score = score
        doc_name=pptx_file_paths[i]

# Print the best answer and the corresponding paragraph
print(f"Question: {quest}")
print(f"Answer: {best_answer}")
print(f"Document : {doc_name}")

best_answer = None
best_paragraph = None
best_score = 0
doc_name=""
quest="What makes the analysis of performance and functional problems a complex landscape?"

# Question-answering on each document
for i in range(len(main_text)):
    result = nlp(question=quest, context=main_text[i])
    answer = result['answer']
    score = result['score']

    # Highest score update
    if score > best_score:
        best_answer = answer
        best_paragraph = main_text[i]
        best_score = score
        doc_name=pptx_file_paths[i]

# Print the question, the best answer and the corresponding paragraph
print(f"Question: {quest}")
print(f"Answer: {best_answer}")
print(f"Document : {doc_name}")

best_answer = None
best_paragraph = None
best_score = 0
doc_name=""
quest="What does the Configuartion Validation in SAP Solution Manager does?"

# Question-answering on each document
for i in range(len(main_text)):
    result = nlp(question=quest, context=main_text[i])
    answer = result['answer']
    score = result['score']

    # Highest score update
    if score > best_score:
        best_answer = answer
        best_paragraph = main_text[i]
        best_score = score
        doc_name=pptx_file_paths[i]

# Print the question, the best answer and the corresponding paragraph
print(f"Question: {quest}")
print(f"Answer: {best_answer}")
print(f"Document : {doc_name}")